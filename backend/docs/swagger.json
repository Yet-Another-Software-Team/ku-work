{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample API for KU-Work",
        "title": "KU-Work API",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "paths": {
        "/admin/audits": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all audit log entries. This endpoint is restricted to admin users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Admin"
                ],
                "summary": "Get an Audit Log (Admin only)",
                "responses": {
                    "200": {
                        "description": "List of all audit log entries",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Audit"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/applications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches job applications for the authenticated user. If the user is a company, it returns all applications for all their job postings. If the user is a student, it returns all of their own applications. Supports pagination and status filtering.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job Applications"
                ],
                "summary": "Get all applications for the current user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by status (pending, accepted, rejected)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "date-desc",
                        "description": "Sort by (name, date-desc, date-asc)",
                        "name": "sortBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 0,
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 32,
                        "description": "Limit for pagination",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of job applications with total count",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "applications": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/handlers.ApplicationWithJobDetails"
                                    }
                                },
                                "total": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User is not a company or student",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/admin/login": {
            "post": {
                "description": "Authenticates an admin user with their username and password. On successful authentication, it returns a JWT token for session management and sets a refresh token in a cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Admin login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid credentials",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/company/login": {
            "post": {
                "description": "Authenticates a company user with their username and password. On successful authentication, it returns a JWT token for session management and sets a refresh token in a cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Company login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid credentials",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/company/register": {
            "post": {
                "description": "Handles the registration of a new company account. It takes company details and credentials, creates a new user and company profile, and returns JWT tokens upon successful registration.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new company",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company's username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password (min 8 characters)",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Company's contact email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Company's website URL",
                        "name": "website",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company's contact phone number",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Company's physical address",
                        "name": "address",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "City",
                        "name": "city",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Country",
                        "name": "country",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Company's profile photo",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Company's banner image",
                        "name": "banner",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "About the company",
                        "name": "about",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Registration successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict: Username already exists",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/google/login": {
            "post": {
                "description": "Handles the server-side flow for Google OAuth2. It receives an authorization code from the client, exchanges it for a token with Google, fetches the user's profile information, and then either creates a new user account or logs in an existing user. On success, it returns a JWT token and sets a refresh token cookie.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Handle Google OAuth login",
                "parameters": [
                    {
                        "description": "Google Authorization Code",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.oauthToken"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " isRegistered": {
                                    "type": "boolean"
                                },
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "201": {
                        "description": "User registration successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " isRegistered": {
                                    "type": "boolean"
                                },
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Authorization code is required",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid access token",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Invalidates the user's session by deleting their refresh token from the database and clearing the refresh token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout user",
                "responses": {
                    "200": {
                        "description": "Logged out successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Renews an access token using a valid refresh token provided in a cookie. It returns a new JWT and user details, and sets a new refresh token cookie.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Refresh JWT token",
                "responses": {
                    "200": {
                        "description": "Successfully refreshed token",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                " username": {
                                    "type": "string"
                                },
                                "token": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Missing, invalid, or expired refresh token",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error: Failed to generate new tokens",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/auth/student/register": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Handles the registration process for a user who has already authenticated (e.g., via Google OAuth) to become a student. The registration is submitted for admin approval. This endpoint is protected and requires authentication.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Register as a student",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone number",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Birth date in RFC3339 format (e.g., 2006-01-02T15:04:05Z)",
                        "name": "birthDate",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "A short bio or about me section",
                        "name": "aboutMe",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub profile URL",
                        "name": "github",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "LinkedIn profile URL",
                        "name": "linkedIn",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "10-digit student ID number",
                        "name": "studentId",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "Software and Knowledge Engineering",
                            "Computer Engineering"
                        ],
                        "type": "string",
                        "description": "Major of study",
                        "name": "major",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "enum": [
                            "Graduated",
                            "Current Student"
                        ],
                        "type": "string",
                        "description": "Current student status",
                        "name": "studentStatus",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Profile photo",
                        "name": "photo",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Document proving student status (e.g., student ID card photo)",
                        "name": "statusPhoto",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "Conflict: User already registered",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/company": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of all registered companies. This endpoint is restricted to admin users.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Get a list of all companies (Admin only)",
                "responses": {
                    "200": {
                        "description": "List of all companies",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/handlers.CompanyResponse"
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/company/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the profile of a specific company using their user ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Get a company's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.CompanyResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files/{fileID}": {
            "get": {
                "description": "Serves a file from the server's file system using its unique ID. This is a public endpoint.",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "Files"
                ],
                "summary": "Get a file",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File ID",
                        "name": "fileID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The requested file",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid file identifier or path",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: File not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves a list of job postings with extensive filtering options. Behavior changes based on user role. Companies see their own jobs with application stats. Admins can see all jobs. Others see only open, approved jobs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Fetch job listings",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 32,
                        "description": "Pagination limit",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by location",
                        "name": "location",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search keyword for name and description",
                        "name": "keyword",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by job type(s)",
                        "name": "jobType",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by experience level(s)",
                        "name": "experience",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Minimum salary filter",
                        "name": "minSalary",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Maximum salary filter",
                        "name": "maxSalary",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter by open status (company only)",
                        "name": "open",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by company ID",
                        "name": "companyId",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by specific job ID",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by approval status (admin/company only)",
                        "name": "approvalStatus",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of jobs for a non-company user",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "jobs": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/handlers.JobResponse"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an authenticated company to create a new job posting. The job will be pending approval by an admin.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Create a new job listing",
                "parameters": [
                    {
                        "description": "Job creation data",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateJobInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created job listing",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "type": "integer"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the detailed information for a single job posting by its ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Get job details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job details retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/handlers.JobResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid job ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows a company to edit one of their own job postings. Supports partial updates.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Edit a job listing",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Job update data",
                        "name": "job",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EditJobInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}/applications": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete all job applications for a job, includes filter for only rejected, pending, or accepted jobs.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job Applications"
                ],
                "summary": "Delete job applications for a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Whether to include pending job applications or not",
                        "name": "pending",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ClearJobApplicationsHandler.ClearJobApplicationsInput"
                        }
                    },
                    {
                        "description": "Whether to include accepted job applications or not",
                        "name": "accepted",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ClearJobApplicationsHandler.ClearJobApplicationsInput"
                        }
                    },
                    {
                        "description": "Whether to include rejected job applications or not",
                        "name": "rejected",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ClearJobApplicationsHandler.ClearJobApplicationsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid job ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Job not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}/applications/{studentUserId}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves detailed information about a single job application for a specific student, including the applicant's full profile, contact information, and attached files (resume, etc.).",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job Applications"
                ],
                "summary": "Get a specific job application",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Student Email",
                        "name": "studentUserId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Detailed job application",
                        "schema": {
                            "$ref": "#/definitions/handlers.FullApplicantDetail"
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid job ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Job application not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates the status of a job application to 'accepted', 'rejected', or 'pending'. This action can only be performed by the company that posted the job.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job Applications"
                ],
                "summary": "Update job application status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Student User ID",
                        "name": "studentUserId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateJobApplicationStatusHandler.UpdateStatusInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Application status updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " status": {
                                    "type": "string"
                                },
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid ID or input",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: User is not authorized to update this application",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Job or application not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}/apply": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new job application. Allows an approved student to apply to an approved job posting by submitting their application with optional alternate contact information and required document files (e.g., resume, cover letter).",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Job Applications"
                ],
                "summary": "Apply to a job",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Files to upload (e.g., Resume, Cover Letter). Max 2 files.",
                        "name": "Files",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Alternate phone number",
                        "name": "AltPhone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Alternate email address",
                        "name": "AltEmail",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully created job application",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request: Invalid input",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden: Student status not approved",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Invalid Job ID",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/jobs/{id}/approval": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an admin to approve or reject a job posting submitted by a company.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Jobs"
                ],
                "summary": "Approve or reject a job listing (Admin only)",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Job ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval action",
                        "name": "approval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.ApproveJobInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves basic profile information (username, role, and user ID) for the currently authenticated user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get current user's profile",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user profile",
                        "schema": {
                            "type": "object",
                            "properties": {
                                " role": {
                                    "type": "string"
                                },
                                " userId": {
                                    "type": "string"
                                },
                                "username": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Edits the profile of the currently authenticated user. This endpoint automatically detects whether the user is a student or a company and accepts the appropriate fields for that role. Supports partial updates.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Edit user profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Phone number (For both Student and Company)",
                        "name": "phone",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Birth date in RFC3339 format (Student only)",
                        "name": "birthDate",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "About me/us section (For both Student and Company)",
                        "name": "aboutMe",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "GitHub profile URL (Student only)",
                        "name": "github",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "LinkedIn profile URL (Student only)",
                        "name": "linkedIn",
                        "in": "formData"
                    },
                    {
                        "enum": [
                            "Graduated",
                            "Current Student"
                        ],
                        "type": "string",
                        "description": "Student status (Student only)",
                        "name": "studentStatus",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company email (Company only)",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company website URL (Company only)",
                        "name": "website",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company address (Company only)",
                        "name": "address",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company city (Company only)",
                        "name": "city",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Company country (Company only)",
                        "name": "country",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Profile photo/logo (For both Student and Company)",
                        "name": "photo",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Company banner image (Company only)",
                        "name": "banner",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/students": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Fetches student profile information. An admin can retrieve a paginated list of all students and filter by approval status. A regular user will get their own detailed profile. An admin can also specify a user ID to get a specific profile.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Get student profile(s)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of a specific student (for admins)",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Pagination offset (for admin list)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 64,
                        "description": "Pagination limit (for admin list)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "pending",
                            "accepted",
                            "rejected"
                        ],
                        "type": "string",
                        "description": "Filter by approval status (for admin list)",
                        "name": "approvalStatus",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a single student's detailed profile",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "profile": {
                                    "$ref": "#/definitions/handlers.StudentHandler"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/students/{id}/approval": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Allows an admin to approve or reject a student's registration application based on their user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Students"
                ],
                "summary": "Approve or reject a student registration (Admin only)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID of the student to be approved/rejected",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Approval action",
                        "name": "approval",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.StudentHandler"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ok",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found: Student not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ApplicationWithJobDetails": {
            "type": "object",
            "properties": {
                "companyName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "experience": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.File"
                    }
                },
                "isOpen": {
                    "type": "boolean"
                },
                "jobId": {
                    "type": "integer"
                },
                "jobName": {
                    "type": "string"
                },
                "jobType": {
                    "type": "string"
                },
                "maxSalary": {
                    "type": "integer"
                },
                "minSalary": {
                    "type": "integer"
                },
                "phone": {
                    "type": "string"
                },
                "photoId": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.JobApplicationStatus"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "handlers.ApproveJobInput": {
            "type": "object",
            "properties": {
                "approve": {
                    "type": "boolean"
                },
                "reason": {
                    "type": "string",
                    "maxLength": 16384
                }
            }
        },
        "handlers.ClearJobApplicationsHandler.ClearJobApplicationsInput": {
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "boolean"
                },
                "pending": {
                    "type": "boolean"
                },
                "rejected": {
                    "type": "boolean"
                }
            }
        },
        "handlers.CompanyResponse": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "bannerId": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "photoId": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "handlers.CreateJobInput": {
            "type": "object",
            "required": [
                "description",
                "duration",
                "experience",
                "jobType",
                "location",
                "maxSalary",
                "minSalary",
                "name",
                "position"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 16384
                },
                "duration": {
                    "type": "string",
                    "maxLength": 128
                },
                "experience": {
                    "type": "string",
                    "enum": [
                        "newgrad",
                        "junior",
                        "senior",
                        "manager",
                        "internship"
                    ]
                },
                "jobType": {
                    "type": "string",
                    "enum": [
                        "fulltime",
                        "parttime",
                        "contract",
                        "casual",
                        "internship"
                    ]
                },
                "location": {
                    "type": "string",
                    "maxLength": 128
                },
                "maxSalary": {
                    "type": "integer"
                },
                "minSalary": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 128
                },
                "notifyOnApplication": {
                    "type": "boolean"
                },
                "open": {
                    "type": "boolean"
                },
                "position": {
                    "type": "string",
                    "maxLength": 128
                }
            }
        },
        "handlers.EditJobInput": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "maxLength": 16384
                },
                "duration": {
                    "type": "string",
                    "maxLength": 128
                },
                "experience": {
                    "type": "string",
                    "enum": [
                        "newgrad",
                        "junior",
                        "senior",
                        "manager",
                        "internship"
                    ]
                },
                "jobType": {
                    "type": "string",
                    "enum": [
                        "fulltime",
                        "parttime",
                        "contract",
                        "casual",
                        "internship"
                    ]
                },
                "location": {
                    "type": "string",
                    "maxLength": 128
                },
                "maxSalary": {
                    "type": "integer"
                },
                "minSalary": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "maxLength": 128
                },
                "notifyOnApplication": {
                    "type": "boolean"
                },
                "open": {
                    "type": "boolean"
                },
                "position": {
                    "type": "string",
                    "maxLength": 128
                }
            }
        },
        "handlers.FullApplicantDetail": {
            "type": "object",
            "properties": {
                "aboutMe": {
                    "type": "string"
                },
                "birthDate": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.File"
                    }
                },
                "github": {
                    "type": "string"
                },
                "jobId": {
                    "type": "integer"
                },
                "linkedIn": {
                    "type": "string"
                },
                "major": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "photoId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/model.JobApplicationStatus"
                },
                "studentId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.JobResponse": {
            "type": "object",
            "properties": {
                "approvalStatus": {
                    "type": "string"
                },
                "bannerId": {
                    "type": "string"
                },
                "companyId": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "experience": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "maxSalary": {
                    "type": "integer"
                },
                "minSalary": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "open": {
                    "type": "boolean"
                },
                "photoId": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.JobWithStatsResponse": {
            "type": "object",
            "properties": {
                "accepted": {
                    "type": "integer"
                },
                "approvalStatus": {
                    "type": "string"
                },
                "bannerId": {
                    "type": "string"
                },
                "companyId": {
                    "type": "string"
                },
                "companyName": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "duration": {
                    "type": "string"
                },
                "experience": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "jobType": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "maxSalary": {
                    "type": "integer"
                },
                "minSalary": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "open": {
                    "type": "boolean"
                },
                "pending": {
                    "type": "integer"
                },
                "photoId": {
                    "type": "string"
                },
                "position": {
                    "type": "string"
                },
                "rejected": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.ShortApplicationDetail": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "files": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.File"
                    }
                },
                "jobId": {
                    "type": "integer"
                },
                "major": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "studentId": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "handlers.StudentHandler": {
            "type": "object"
        },
        "handlers.UpdateJobApplicationStatusHandler.UpdateStatusInput": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "type": "string",
                    "enum": [
                        "accepted",
                        "rejected",
                        "pending"
                    ]
                }
            }
        },
        "handlers.oauthToken": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "model.Audit": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "actorID": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "objectID": {
                    "type": "string"
                },
                "objectName": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                }
            }
        },
        "model.File": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/model.FileCategory"
                },
                "createdAt": {
                    "type": "string"
                },
                "fileType": {
                    "$ref": "#/definitions/model.FileType"
                },
                "id": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "model.FileCategory": {
            "type": "string",
            "enum": [
                "image",
                "document"
            ],
            "x-enum-varnames": [
                "FileCategoryImage",
                "FileCategoryDocument"
            ]
        },
        "model.FileType": {
            "type": "string",
            "enum": [
                "jpg",
                "jpeg",
                "png",
                "webp",
                "pdf",
                "doc",
                "docx"
            ],
            "x-enum-varnames": [
                "FileTypeJPG",
                "FileTypeJPEG",
                "FileTypePNG",
                "FileTypeWEBP",
                "FileTypePDF",
                "FileTypeDOC",
                "FileTypeDOCX"
            ]
        },
        "model.JobApplicationStatus": {
            "type": "string",
            "enum": [
                "accepted",
                "rejected",
                "pending"
            ],
            "x-enum-varnames": [
                "JobApplicationAccepted",
                "JobApplicationRejected",
                "JobApplicationPending"
            ]
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and the Token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}