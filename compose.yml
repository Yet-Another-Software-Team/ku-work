services:
  db:
    image: "postgres:17-alpine"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /pgdata
    volumes:
      - type: volume
        source: db
        target: /pgdata
    expose:
      - 5432
    ports:
      - "5432:5432"
    healthcheck:
      test:
        - CMD-SHELL
        - pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER
      start_period: 10s
      interval: 10s
      retries: 6

  backend:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file: ".env"
    environment:
      LISTEN_ADDRESS: :8000
      DB_PORT: 5432
      DB_HOST: db
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      CORS_ALLOWED_ORIGINS: http://localhost:3000,http://frontend:3000
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS}
      CORS_MAX_AGE: ${CORS_MAX_AGE}
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      APPROVAL_AI: ${APPROVAL_AI}
      APPROVAL_AI_MODEL: ${APPROVAL_AI_MODEL}
      APPROVAL_AI_URI: ${APPROVAL_AI_URI}
      SWAGGER_HOST: ${SWAGGER_HOST}

  frontend:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
      args:
        GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
        API_BASE_URL: http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend

volumes:
  db:
